	.text
	.global _start
	.org 0x000

_start:
main:

	movi	sp, 0x7FFC
	movi	r2, LIST 	#address of list in r2
	ldw	r3,N(r0)	#only works if adreess of N fits in 16 bits

#	movia r3, N	 	# works for anyy adress
#	ldw	r3,0(r3)	#
	call	ZeroCount

	stw r2,ZCOUNT(r0)	return instr

	break #halts the code


#------------------------------------------------

ZeroCount: /* r2 is list ptr, r3 is num. elems */
	subi	sp,sp,12
	stw	ra,16(sp)	# for nested call
	stw	r3,8(sp) 	#orig val of N
	stw	r4,4(sp)	#pointer in sub routine
	stw 	r5,0(sp)	#count of zero element

	movi	r5,0		#set r5 to 0
	mov	r4,r2		#prepare local pointer
zc_loop:
zc_if:
	ldw r2,0(r4)
	call CheckIfZero
	beq r2,r0,zc_end_if
zc_then:
	addi r5,r5,1 #count = count+1
zc_end_if:
	addi r4,r4,4
	subi r3,r3,1
	bgt r3,r0,zc_loop
	
	mov r2, r5


	
	ldw	ra,12(sp)	# for nested call
	ldw	r3,8(sp) 	#orig val of N
	ldw	r4,4(sp)	#pointer in sub routine
	ldw 	r5,0(sp)	#count of zero element
	addi	sp,sp,16

	ret

#---------------------------------------------------------
CheckIfZero:
ciz_if:
	bne	r2,r0,ciz_else #branch not equal to
ciz_then:
	movi r2, 1
	br ciz_end_if
ciz_else:
	movi r2,0
ciz_end_if:
	ret

#----------------------------------------------------------

.org 0x1000
ZCOUNT: .skip 4
N: .word 5
LIST: .word 34, 0,57,69,0
	.end
