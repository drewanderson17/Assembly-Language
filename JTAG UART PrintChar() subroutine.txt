# Print CHar sub routine
# pseudo code
# printChar(char)::
#	while (st is zero)
#		st = read JTAG UART Status register
#		st = st AND 0xFFFF0000
#	write ch to JTAG UART data register

#definitions and initializations, we need to define were the data for the JTAG UART system will go

.equ JTAG_UARTBASE,	0x10001000	#adress of first JTAG UART register
.equ DATA_OFFSET,	0		# offset of JTAG UART data register
.equ STATUS_OFFSET,	4		#offset of JTAG UART status register
.equ WKSPACE_MASK,	0xFFFF		# used in AND operation to check status

PrintChar:
	subi	sp, sp, 8 		# adjust stack pointer down to reserve space
	stw 	r3, 4(sp)		#save value of register r3 so it can be altered within function
	stw 	r4, 0(sp)		# save value of r4 so it can be used as temp 
	movia	r3,JTAG_UART_BASE	# r3 is being used as a pointer to the first memory-mapped I/O register
pc_loop:
	ldwio	r4,STATUS_OFFSET(r3)	#read bits from status register
	andhi	r4,r4,WSPACE_MASK	# mask of lower bits to isolate uper bits to read the 'ready symbol' / status flag
	beq	r4,r0, pc_loop		# if upper bits are zero, loop again (no data came throught from JTAG UArt system
	stwio	r2,DaTA_OFFSET(r3)	#otherwise, write character to data register
	ldw	r3,4(sp)		#restore value of r3 from stack
	ldw	r4,0(sp)		#restore value of r4 from stack
	addi	sp, sp, 8		#readjust stack pointer up to deallocate space
	ret				#return to calling routine
